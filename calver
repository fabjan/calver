#! /bin/sh

set -e

cmd=$(basename "$0")

bailing()
{
    echo>&2 "$cmd: $*"
}

usage()
{
    cat <<EOF

Usage:
  $cmd [--stdin] [--prerelease <tag>] [--dayofyear]
  $cmd --timestamp [--dayofyear]
  $cmd --help
EOF
}

help()
{
    cat <<EOF
calver - generate a calendar version based on commit history
$(usage)

Options:
  --help              show this help
  --stdin             read commit list from stdin instead of asking 'git'
  --prerelease <tag>  generate a prerelease tag (lowercase letters only)
  --timestamp         generate from current time instead of commit history
  --dayofyear         use day of year (1-366) instead of month/day for minor version
EOF
}

stdin=no
prerelease=""
timestamp=no
dayofyear=no

while [ $# -gt 0 ]
do
    case "$1" in
        --stdin)
            stdin=yes
            ;;
        --prerelease)
            prerelease="$2"
            if [ -z "$prerelease" ]
            then
                bailing "missing argument for --prerelease"
                usage>&2
                exit 1
            fi
            shift
            ;;
        --timestamp)
            timestamp=yes
            ;;
        --dayofyear)
            dayofyear=yes
            ;;
        --help)
            help
            exit 0
            ;;
        *)
            bailing "unknown option: $1"
            usage>&2
            exit 1
            ;;
    esac
    shift
done

# we couldn't use set -u until we've parsed the options
set -u

# --timestamp does not make sense with --stdin or --prerelease
if [ "$timestamp" = yes ] && [ "$stdin" = yes -o -n "$prerelease" ]
then
    bailing "--timestamp is not compatible with --stdin or --prerelease"
    usage>&2
    exit 1
fi

# let's start with only allowing lowercase english letters and dashes,
# expanding later is easier than restricting later
if echo "$prerelease" | LC_ALL=C grep -q '[^a-z-]'
then
    bailing "prerelease tag must be lowercase letters only"
    usage>&2
    exit 1
fi

calculate_from_git()
{
    if [ "$stdin" = yes ]
    then
        if [ -t 0 ]
        then
            bailing "nothing to read on stdin"
            usage>&2
            exit 1
        fi
        commit_list=$(cat)
    else
        commit_list=$(git log --date=short --format=%cd)
    fi

    if [ ! "$commit_list" = "$(echo "$commit_list" | sort -r)" ]
    then
        # Making no assumptions about the order of the commit list for now
        # but I think they can be in any order...
        bailing "commit list is not in order"
        exit 1
    fi

    last_commit_date=$(echo "$commit_list" | head -n 1)
    year=$(echo "$last_commit_date" | cut -d '-' -f 1)
    
    if [ "$dayofyear" = yes ]
    then
        day_of_year=$(date -d "$last_commit_date" +%j)
        day_of_year=$(echo "$day_of_year" | sed 's/^0*//')
        minor="$day_of_year"
    else
        month=$(echo "$last_commit_date" | cut -d '-' -f 2)
        month=$(echo "$month" | sed 's/^0*//')
        day=$(echo "$last_commit_date" | cut -d '-' -f 3)
        day=$(echo "$day" | sed 's/^0*//')
        minor=$((month * 100 + day))
    fi

    # set global variables
    major="$year"
    patch=$(echo "$commit_list" | grep -c "^$last_commit_date")
}

if [ "$timestamp" = yes ]
then
    # set global variables
    major=$(date +%Y)
    if [ "$dayofyear" = yes ]
    then
        day_of_year=$(date +%j)
        minor=$(echo "$day_of_year" | sed 's/^0*//')
    else
        minor=$(date +%-m%d)
    fi
    patch=$(date +%-H%M)
else
    calculate_from_git
fi

case "$prerelease" in
    "")
        ;;
    *)
        # This means multiple prereleases can have the same base version but
        # as long as you don't use the same tag for different prereleases
        # there is no ambiguity. Before making a release we can't know which
        # patch version to use anyway.
        patch="0-$prerelease.$patch"
        ;;
esac

# read global variables
echo "$major.$minor.$patch"
